# .github/workflows/autograde-projects.yml
name: Autograde (Changed Projects Only)

on:
  push:
    paths:
      - "projects/**"
      - ".github/workflows/autograde-projects.yml"
  pull_request:
    paths:
      - "projects/**"
      - ".github/workflows/autograde-projects.yml"
  workflow_dispatch:

jobs:
  discover-changes:
    name: Detect changed project(s)
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.detect.outputs.projects }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute diff range
        id: range
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.event.pull_request.head.sha }}"
          else
            # push event
            BASE="${{ github.event.before }}"
            HEAD="${{ github.sha }}"
          fi
          echo "base=$BASE" >> $GITHUB_OUTPUT
          echo "head=$HEAD" >> $GITHUB_OUTPUT

      - name: Detect changed project directories
        id: detect
        run: |
          git diff --name-only "${{ steps.range.outputs.base }}" "${{ steps.range.outputs.head }}" > changed.txt || true

          # Extract unique "projects/project-N/assignment" parents from changed files
          awk -F/ '/^projects\/project-[0-9]+\/assignment\// {print $1"/"$2"/"$3}' changed.txt \
            | sort -u > changed_projects.txt

          # Convert to JSON array of project keys: ["project-1","project-5",...]
          if [ -s changed_projects.txt ]; then
            awk -F/ '{print $2}' changed_projects.txt | awk '{printf "\"%s\",",$0}' | sed 's/,$//' > list.txt
            echo "projects=[$(cat list.txt)]" >> $GITHUB_OUTPUT
          else
            echo "projects=[]" >> $GITHUB_OUTPUT
          fi

      - name: Show detected projects
        run: |
          echo "Detected projects JSON: ${{ steps.detect.outputs.projects }}"

  grade:
    name: Grade ${{ matrix.project }}
    needs: discover-changes
    if: ${{ needs.discover-changes.outputs.projects != '[]' }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.discover-changes.outputs.projects) }}

    defaults:
      run:
        shell: bash
        working-directory: projects/${{ matrix.project }}/assignment

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug paths
        run: |
          echo "PWD=$(pwd)"
          ls -la
          echo "Repo root:"
          ls -la $GITHUB_WORKSPACE
          echo "Assignment dir contents:"
          ls -la .

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt; installing minimal defaults"
            pip install rdflib SPARQLWrapper pyshacl pytest nbclient
          fi

      - name: Execute env-report notebook (optional)
        if: ${{ false }}
        run: |
          if [ -f notebooks/env-report.ipynb ]; then
            python - <<'PY'
            import nbformat
            from nbclient import NotebookClient
            nb = nbformat.read('notebooks/env-report.ipynb', as_version=4)
            NotebookClient(nb, timeout=300, kernel_name='python3').execute()
            print("Notebook executed successfully.")
            PY
          else
            echo "No env-report.ipynb found; skipping."
          fi

      - name: Run tests
        run: pytest -q

